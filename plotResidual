#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt

import sys 

import warnings 
warnings.filterwarnings('ignore') # turn off annoying warnings for mpl 

''' Plots residuals from OpenFOAM stdout ''' 

try:

	def skipHeader(fname):
		f = open(fname, 'r')
		line = next(f)
		while ('Starting time loop' not in line):
			line = next(f)

		return f 

	fname = 'log'

	var = [] # store variable names 

	startIter = 0 # store time start 

	# get variable names 
	f = skipHeader(fname)
	for line in f:
		if (line.startswith('Time =')):
			startIter = int(line.split()[2]) - 1
			line = next(f) 
			while ('ExecutionTime' not in line):
				for i in range(len(line)):
					string = 'Solving for '
					if (line[i:i+len(string)] == string):
						if (line[i+len(string):].split(',')[0] not in var):
							var.append(line[i+len(string):].split(',')[0])
				line = next(f)
			break 
	f.close()

	num = len(var)

	fig = plt.figure()
	# plt.ion()
	run = 1
	while(run == 1):

		for i in range(len(var)):
			plt.subplot(int(np.ceil(num/2)), 2, i+1)
			val = [] # store values 
			f = skipHeader(fname)
			for line in f:
				if ('Solving for ' + var[i] in line):
					for j in range(len(line)):
						string = 'Final residual = ' 
						if (line[j:j+len(string)] == string):
							val.append(line[j+len(string):].split(',')[0])
					
				if (line == 'End\n'):
					run = 0

			plt.semilogy(np.arange(1, len(val)+1)+startIter, val)
			plt.title(var[i].replace('_','\_') + ' ' + '{:.6e}'.format(float(val[-1])))
			f.close()

		# plt.legend(loc='best', frameon=False)

		if (run == 1):
			plt.pause(1)
			fig.clear()
		if (run == 0):
			plt.show()

# exit nicely on ctrl-c 
except KeyboardInterrupt: 
	sys.exit() 